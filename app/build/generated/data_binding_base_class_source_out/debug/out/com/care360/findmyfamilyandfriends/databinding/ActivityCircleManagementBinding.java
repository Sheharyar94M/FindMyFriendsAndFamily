// Generated by view binder compiler. Do not edit!
package com.care360.findmyfamilyandfriends.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Group;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.care360.findmyfamilyandfriends.R;
import com.google.android.ads.nativetemplates.TemplateView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCircleManagementBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TemplateView adTemplate;

  @NonNull
  public final Group groupAdmin;

  @NonNull
  public final Group groupCircleDetails;

  @NonNull
  public final Group groupNotAdmin;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final TextView textAddMembers;

  @NonNull
  public final TextView textBottomLine1;

  @NonNull
  public final TextView textBottomLine2;

  @NonNull
  public final TextView textBottomLine3;

  @NonNull
  public final TextView textBottomLine4;

  @NonNull
  public final TextView textCircleDetails;

  @NonNull
  public final TextView textCircleManagement;

  @NonNull
  public final TextView textDeleteCircle;

  @NonNull
  public final TextView textEditCircleName;

  @NonNull
  public final TextView textLeaveCircle;

  @NonNull
  public final TextView textRemoveMembers;

  @NonNull
  public final TextView textViewMembers;

  @NonNull
  public final Toolbar toolbarCircleManagement;

  private ActivityCircleManagementBinding(@NonNull ConstraintLayout rootView,
      @NonNull TemplateView adTemplate, @NonNull Group groupAdmin,
      @NonNull Group groupCircleDetails, @NonNull Group groupNotAdmin,
      @NonNull ProgressBar progressBar, @NonNull TextView textAddMembers,
      @NonNull TextView textBottomLine1, @NonNull TextView textBottomLine2,
      @NonNull TextView textBottomLine3, @NonNull TextView textBottomLine4,
      @NonNull TextView textCircleDetails, @NonNull TextView textCircleManagement,
      @NonNull TextView textDeleteCircle, @NonNull TextView textEditCircleName,
      @NonNull TextView textLeaveCircle, @NonNull TextView textRemoveMembers,
      @NonNull TextView textViewMembers, @NonNull Toolbar toolbarCircleManagement) {
    this.rootView = rootView;
    this.adTemplate = adTemplate;
    this.groupAdmin = groupAdmin;
    this.groupCircleDetails = groupCircleDetails;
    this.groupNotAdmin = groupNotAdmin;
    this.progressBar = progressBar;
    this.textAddMembers = textAddMembers;
    this.textBottomLine1 = textBottomLine1;
    this.textBottomLine2 = textBottomLine2;
    this.textBottomLine3 = textBottomLine3;
    this.textBottomLine4 = textBottomLine4;
    this.textCircleDetails = textCircleDetails;
    this.textCircleManagement = textCircleManagement;
    this.textDeleteCircle = textDeleteCircle;
    this.textEditCircleName = textEditCircleName;
    this.textLeaveCircle = textLeaveCircle;
    this.textRemoveMembers = textRemoveMembers;
    this.textViewMembers = textViewMembers;
    this.toolbarCircleManagement = toolbarCircleManagement;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCircleManagementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCircleManagementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_circle_management, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCircleManagementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ad_template;
      TemplateView adTemplate = ViewBindings.findChildViewById(rootView, id);
      if (adTemplate == null) {
        break missingId;
      }

      id = R.id.group_admin;
      Group groupAdmin = ViewBindings.findChildViewById(rootView, id);
      if (groupAdmin == null) {
        break missingId;
      }

      id = R.id.group_circle_details;
      Group groupCircleDetails = ViewBindings.findChildViewById(rootView, id);
      if (groupCircleDetails == null) {
        break missingId;
      }

      id = R.id.group_not_admin;
      Group groupNotAdmin = ViewBindings.findChildViewById(rootView, id);
      if (groupNotAdmin == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.text_add_members;
      TextView textAddMembers = ViewBindings.findChildViewById(rootView, id);
      if (textAddMembers == null) {
        break missingId;
      }

      id = R.id.text_bottom_line_1;
      TextView textBottomLine1 = ViewBindings.findChildViewById(rootView, id);
      if (textBottomLine1 == null) {
        break missingId;
      }

      id = R.id.text_bottom_line_2;
      TextView textBottomLine2 = ViewBindings.findChildViewById(rootView, id);
      if (textBottomLine2 == null) {
        break missingId;
      }

      id = R.id.text_bottom_line_3;
      TextView textBottomLine3 = ViewBindings.findChildViewById(rootView, id);
      if (textBottomLine3 == null) {
        break missingId;
      }

      id = R.id.text_bottom_line_4;
      TextView textBottomLine4 = ViewBindings.findChildViewById(rootView, id);
      if (textBottomLine4 == null) {
        break missingId;
      }

      id = R.id.text_circle_details;
      TextView textCircleDetails = ViewBindings.findChildViewById(rootView, id);
      if (textCircleDetails == null) {
        break missingId;
      }

      id = R.id.text_circle_management;
      TextView textCircleManagement = ViewBindings.findChildViewById(rootView, id);
      if (textCircleManagement == null) {
        break missingId;
      }

      id = R.id.text_delete_circle;
      TextView textDeleteCircle = ViewBindings.findChildViewById(rootView, id);
      if (textDeleteCircle == null) {
        break missingId;
      }

      id = R.id.text_edit_circle_name;
      TextView textEditCircleName = ViewBindings.findChildViewById(rootView, id);
      if (textEditCircleName == null) {
        break missingId;
      }

      id = R.id.text_leave_circle;
      TextView textLeaveCircle = ViewBindings.findChildViewById(rootView, id);
      if (textLeaveCircle == null) {
        break missingId;
      }

      id = R.id.text_remove_members;
      TextView textRemoveMembers = ViewBindings.findChildViewById(rootView, id);
      if (textRemoveMembers == null) {
        break missingId;
      }

      id = R.id.text_view_members;
      TextView textViewMembers = ViewBindings.findChildViewById(rootView, id);
      if (textViewMembers == null) {
        break missingId;
      }

      id = R.id.toolbar_circle_management;
      Toolbar toolbarCircleManagement = ViewBindings.findChildViewById(rootView, id);
      if (toolbarCircleManagement == null) {
        break missingId;
      }

      return new ActivityCircleManagementBinding((ConstraintLayout) rootView, adTemplate,
          groupAdmin, groupCircleDetails, groupNotAdmin, progressBar, textAddMembers,
          textBottomLine1, textBottomLine2, textBottomLine3, textBottomLine4, textCircleDetails,
          textCircleManagement, textDeleteCircle, textEditCircleName, textLeaveCircle,
          textRemoveMembers, textViewMembers, toolbarCircleManagement);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
