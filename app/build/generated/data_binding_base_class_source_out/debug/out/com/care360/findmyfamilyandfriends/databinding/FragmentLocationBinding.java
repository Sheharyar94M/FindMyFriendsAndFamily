// Generated by view binder compiler. Do not edit!
package com.care360.findmyfamilyandfriends.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.fragment.app.FragmentContainerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.care360.findmyfamilyandfriends.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLocationBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FrameLayout adaptiveBanner;

  @NonNull
  public final LayoutBottomSheetBinding bottomSheetMembers;

  @NonNull
  public final ConstraintLayout consCheckIn;

  @NonNull
  public final ConstraintLayout consLiveLoc;

  @NonNull
  public final ConstraintLayout consMapType;

  @NonNull
  public final CoordinatorLayout coordinatorLayout;

  @NonNull
  public final ImageView imgCheckIn;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ConstraintLayout locationFragment;

  @NonNull
  public final FragmentContainerView map;

  @NonNull
  public final LayoutToolbarBinding toolbar;

  @NonNull
  public final LayoutCircleSelectionBinding toolbarExtendedView;

  private FragmentLocationBinding(@NonNull ConstraintLayout rootView,
      @NonNull FrameLayout adaptiveBanner, @NonNull LayoutBottomSheetBinding bottomSheetMembers,
      @NonNull ConstraintLayout consCheckIn, @NonNull ConstraintLayout consLiveLoc,
      @NonNull ConstraintLayout consMapType, @NonNull CoordinatorLayout coordinatorLayout,
      @NonNull ImageView imgCheckIn, @NonNull LinearLayout linearLayout,
      @NonNull ConstraintLayout locationFragment, @NonNull FragmentContainerView map,
      @NonNull LayoutToolbarBinding toolbar,
      @NonNull LayoutCircleSelectionBinding toolbarExtendedView) {
    this.rootView = rootView;
    this.adaptiveBanner = adaptiveBanner;
    this.bottomSheetMembers = bottomSheetMembers;
    this.consCheckIn = consCheckIn;
    this.consLiveLoc = consLiveLoc;
    this.consMapType = consMapType;
    this.coordinatorLayout = coordinatorLayout;
    this.imgCheckIn = imgCheckIn;
    this.linearLayout = linearLayout;
    this.locationFragment = locationFragment;
    this.map = map;
    this.toolbar = toolbar;
    this.toolbarExtendedView = toolbarExtendedView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLocationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLocationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_location, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLocationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adaptiveBanner;
      FrameLayout adaptiveBanner = ViewBindings.findChildViewById(rootView, id);
      if (adaptiveBanner == null) {
        break missingId;
      }

      id = R.id.bottom_sheet_members;
      View bottomSheetMembers = ViewBindings.findChildViewById(rootView, id);
      if (bottomSheetMembers == null) {
        break missingId;
      }
      LayoutBottomSheetBinding binding_bottomSheetMembers = LayoutBottomSheetBinding.bind(bottomSheetMembers);

      id = R.id.cons_check_in;
      ConstraintLayout consCheckIn = ViewBindings.findChildViewById(rootView, id);
      if (consCheckIn == null) {
        break missingId;
      }

      id = R.id.cons_live_loc;
      ConstraintLayout consLiveLoc = ViewBindings.findChildViewById(rootView, id);
      if (consLiveLoc == null) {
        break missingId;
      }

      id = R.id.cons_map_type;
      ConstraintLayout consMapType = ViewBindings.findChildViewById(rootView, id);
      if (consMapType == null) {
        break missingId;
      }

      id = R.id.coordinator_layout;
      CoordinatorLayout coordinatorLayout = ViewBindings.findChildViewById(rootView, id);
      if (coordinatorLayout == null) {
        break missingId;
      }

      id = R.id.img_check_in;
      ImageView imgCheckIn = ViewBindings.findChildViewById(rootView, id);
      if (imgCheckIn == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      ConstraintLayout locationFragment = (ConstraintLayout) rootView;

      id = R.id.map;
      FragmentContainerView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }
      LayoutToolbarBinding binding_toolbar = LayoutToolbarBinding.bind(toolbar);

      id = R.id.toolbar_extended_view;
      View toolbarExtendedView = ViewBindings.findChildViewById(rootView, id);
      if (toolbarExtendedView == null) {
        break missingId;
      }
      LayoutCircleSelectionBinding binding_toolbarExtendedView = LayoutCircleSelectionBinding.bind(toolbarExtendedView);

      return new FragmentLocationBinding((ConstraintLayout) rootView, adaptiveBanner,
          binding_bottomSheetMembers, consCheckIn, consLiveLoc, consMapType, coordinatorLayout,
          imgCheckIn, linearLayout, locationFragment, map, binding_toolbar,
          binding_toolbarExtendedView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
