// Generated by view binder compiler. Do not edit!
package com.care360.findmyfamilyandfriends.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.utils.widget.ImageFilterView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.care360.findmyfamilyandfriends.R;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolbarListItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout consToolbarListItem;

  @NonNull
  public final ShapeableImageView imgCheck;

  @NonNull
  public final ImageFilterView imgViewCirclePicture;

  @NonNull
  public final TextView txtCircleName;

  @NonNull
  public final TextView txtCircleNameFirstChar;

  private ToolbarListItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout consToolbarListItem, @NonNull ShapeableImageView imgCheck,
      @NonNull ImageFilterView imgViewCirclePicture, @NonNull TextView txtCircleName,
      @NonNull TextView txtCircleNameFirstChar) {
    this.rootView = rootView;
    this.consToolbarListItem = consToolbarListItem;
    this.imgCheck = imgCheck;
    this.imgViewCirclePicture = imgViewCirclePicture;
    this.txtCircleName = txtCircleName;
    this.txtCircleNameFirstChar = txtCircleNameFirstChar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolbarListItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolbarListItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.toolbar_list_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolbarListItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout consToolbarListItem = (ConstraintLayout) rootView;

      id = R.id.img_check;
      ShapeableImageView imgCheck = ViewBindings.findChildViewById(rootView, id);
      if (imgCheck == null) {
        break missingId;
      }

      id = R.id.img_view_circle_picture;
      ImageFilterView imgViewCirclePicture = ViewBindings.findChildViewById(rootView, id);
      if (imgViewCirclePicture == null) {
        break missingId;
      }

      id = R.id.txt_circle_name;
      TextView txtCircleName = ViewBindings.findChildViewById(rootView, id);
      if (txtCircleName == null) {
        break missingId;
      }

      id = R.id.txt_circle_name_first_char;
      TextView txtCircleNameFirstChar = ViewBindings.findChildViewById(rootView, id);
      if (txtCircleNameFirstChar == null) {
        break missingId;
      }

      return new ToolbarListItemBinding((ConstraintLayout) rootView, consToolbarListItem, imgCheck,
          imgViewCirclePicture, txtCircleName, txtCircleNameFirstChar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
