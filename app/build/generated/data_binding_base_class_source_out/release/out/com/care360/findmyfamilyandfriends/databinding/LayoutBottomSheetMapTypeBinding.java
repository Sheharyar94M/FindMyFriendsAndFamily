// Generated by view binder compiler. Do not edit!
package com.care360.findmyfamilyandfriends.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.helper.widget.Flow;
import androidx.constraintlayout.utils.widget.ImageFilterView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.care360.findmyfamilyandfriends.R;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutBottomSheetMapTypeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CardView cardDefault;

  @NonNull
  public final CardView cardHybrid;

  @NonNull
  public final CardView cardSatellite;

  @NonNull
  public final CardView cardTerrain;

  @NonNull
  public final ConstraintLayout consMapDefault;

  @NonNull
  public final ConstraintLayout consMapHybrid;

  @NonNull
  public final ConstraintLayout consMapSatellite;

  @NonNull
  public final ConstraintLayout consMapTerrain;

  @NonNull
  public final Flow flowMap;

  @NonNull
  public final ImageFilterView imgMapDefault;

  @NonNull
  public final ImageFilterView imgMapHybrid;

  @NonNull
  public final ImageFilterView imgMapSatellite;

  @NonNull
  public final ImageFilterView imgMapTerrain;

  @NonNull
  public final ShapeableImageView imgViewCancel;

  @NonNull
  public final HorizontalScrollView scrollView;

  @NonNull
  public final TextView txtDefault;

  @NonNull
  public final TextView txtHybrid;

  @NonNull
  public final TextView txtSatellite;

  @NonNull
  public final TextView txtTerrain;

  @NonNull
  public final TextView txtTitle;

  private LayoutBottomSheetMapTypeBinding(@NonNull ConstraintLayout rootView,
      @NonNull CardView cardDefault, @NonNull CardView cardHybrid, @NonNull CardView cardSatellite,
      @NonNull CardView cardTerrain, @NonNull ConstraintLayout consMapDefault,
      @NonNull ConstraintLayout consMapHybrid, @NonNull ConstraintLayout consMapSatellite,
      @NonNull ConstraintLayout consMapTerrain, @NonNull Flow flowMap,
      @NonNull ImageFilterView imgMapDefault, @NonNull ImageFilterView imgMapHybrid,
      @NonNull ImageFilterView imgMapSatellite, @NonNull ImageFilterView imgMapTerrain,
      @NonNull ShapeableImageView imgViewCancel, @NonNull HorizontalScrollView scrollView,
      @NonNull TextView txtDefault, @NonNull TextView txtHybrid, @NonNull TextView txtSatellite,
      @NonNull TextView txtTerrain, @NonNull TextView txtTitle) {
    this.rootView = rootView;
    this.cardDefault = cardDefault;
    this.cardHybrid = cardHybrid;
    this.cardSatellite = cardSatellite;
    this.cardTerrain = cardTerrain;
    this.consMapDefault = consMapDefault;
    this.consMapHybrid = consMapHybrid;
    this.consMapSatellite = consMapSatellite;
    this.consMapTerrain = consMapTerrain;
    this.flowMap = flowMap;
    this.imgMapDefault = imgMapDefault;
    this.imgMapHybrid = imgMapHybrid;
    this.imgMapSatellite = imgMapSatellite;
    this.imgMapTerrain = imgMapTerrain;
    this.imgViewCancel = imgViewCancel;
    this.scrollView = scrollView;
    this.txtDefault = txtDefault;
    this.txtHybrid = txtHybrid;
    this.txtSatellite = txtSatellite;
    this.txtTerrain = txtTerrain;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutBottomSheetMapTypeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutBottomSheetMapTypeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_bottom_sheet_map_type, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutBottomSheetMapTypeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.card_default;
      CardView cardDefault = ViewBindings.findChildViewById(rootView, id);
      if (cardDefault == null) {
        break missingId;
      }

      id = R.id.card_hybrid;
      CardView cardHybrid = ViewBindings.findChildViewById(rootView, id);
      if (cardHybrid == null) {
        break missingId;
      }

      id = R.id.card_satellite;
      CardView cardSatellite = ViewBindings.findChildViewById(rootView, id);
      if (cardSatellite == null) {
        break missingId;
      }

      id = R.id.card_terrain;
      CardView cardTerrain = ViewBindings.findChildViewById(rootView, id);
      if (cardTerrain == null) {
        break missingId;
      }

      id = R.id.cons_map_default;
      ConstraintLayout consMapDefault = ViewBindings.findChildViewById(rootView, id);
      if (consMapDefault == null) {
        break missingId;
      }

      id = R.id.cons_map_hybrid;
      ConstraintLayout consMapHybrid = ViewBindings.findChildViewById(rootView, id);
      if (consMapHybrid == null) {
        break missingId;
      }

      id = R.id.cons_map_satellite;
      ConstraintLayout consMapSatellite = ViewBindings.findChildViewById(rootView, id);
      if (consMapSatellite == null) {
        break missingId;
      }

      id = R.id.cons_map_terrain;
      ConstraintLayout consMapTerrain = ViewBindings.findChildViewById(rootView, id);
      if (consMapTerrain == null) {
        break missingId;
      }

      id = R.id.flow_map;
      Flow flowMap = ViewBindings.findChildViewById(rootView, id);
      if (flowMap == null) {
        break missingId;
      }

      id = R.id.img_map_default;
      ImageFilterView imgMapDefault = ViewBindings.findChildViewById(rootView, id);
      if (imgMapDefault == null) {
        break missingId;
      }

      id = R.id.img_map_hybrid;
      ImageFilterView imgMapHybrid = ViewBindings.findChildViewById(rootView, id);
      if (imgMapHybrid == null) {
        break missingId;
      }

      id = R.id.img_map_satellite;
      ImageFilterView imgMapSatellite = ViewBindings.findChildViewById(rootView, id);
      if (imgMapSatellite == null) {
        break missingId;
      }

      id = R.id.img_map_terrain;
      ImageFilterView imgMapTerrain = ViewBindings.findChildViewById(rootView, id);
      if (imgMapTerrain == null) {
        break missingId;
      }

      id = R.id.img_view_cancel;
      ShapeableImageView imgViewCancel = ViewBindings.findChildViewById(rootView, id);
      if (imgViewCancel == null) {
        break missingId;
      }

      id = R.id.scroll_view;
      HorizontalScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.txt_default;
      TextView txtDefault = ViewBindings.findChildViewById(rootView, id);
      if (txtDefault == null) {
        break missingId;
      }

      id = R.id.txt_hybrid;
      TextView txtHybrid = ViewBindings.findChildViewById(rootView, id);
      if (txtHybrid == null) {
        break missingId;
      }

      id = R.id.txt_satellite;
      TextView txtSatellite = ViewBindings.findChildViewById(rootView, id);
      if (txtSatellite == null) {
        break missingId;
      }

      id = R.id.txt_terrain;
      TextView txtTerrain = ViewBindings.findChildViewById(rootView, id);
      if (txtTerrain == null) {
        break missingId;
      }

      id = R.id.txt_title;
      TextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new LayoutBottomSheetMapTypeBinding((ConstraintLayout) rootView, cardDefault,
          cardHybrid, cardSatellite, cardTerrain, consMapDefault, consMapHybrid, consMapSatellite,
          consMapTerrain, flowMap, imgMapDefault, imgMapHybrid, imgMapSatellite, imgMapTerrain,
          imgViewCancel, scrollView, txtDefault, txtHybrid, txtSatellite, txtTerrain, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
