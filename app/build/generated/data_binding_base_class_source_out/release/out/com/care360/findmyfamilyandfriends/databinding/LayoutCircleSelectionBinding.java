// Generated by view binder compiler. Do not edit!
package com.care360.findmyfamilyandfriends.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.care360.findmyfamilyandfriends.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutCircleSelectionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View backgroundOpaqueView;

  @NonNull
  public final MaterialButton btnCreateCircleToolbar;

  @NonNull
  public final MaterialButton btnJoinCircleToolbar;

  @NonNull
  public final ConstraintLayout consCircleName;

  @NonNull
  public final ConstraintLayout consCircleSelection;

  @NonNull
  public final ShapeableImageView imgViewAddCircleMembers;

  @NonNull
  public final ImageView imgViewArrowUp;

  @NonNull
  public final RecyclerView recyclerViewCircle;

  @NonNull
  public final TextView textViewBorderLine;

  @NonNull
  public final TextView txtCircleName;

  private LayoutCircleSelectionBinding(@NonNull ConstraintLayout rootView,
      @NonNull View backgroundOpaqueView, @NonNull MaterialButton btnCreateCircleToolbar,
      @NonNull MaterialButton btnJoinCircleToolbar, @NonNull ConstraintLayout consCircleName,
      @NonNull ConstraintLayout consCircleSelection,
      @NonNull ShapeableImageView imgViewAddCircleMembers, @NonNull ImageView imgViewArrowUp,
      @NonNull RecyclerView recyclerViewCircle, @NonNull TextView textViewBorderLine,
      @NonNull TextView txtCircleName) {
    this.rootView = rootView;
    this.backgroundOpaqueView = backgroundOpaqueView;
    this.btnCreateCircleToolbar = btnCreateCircleToolbar;
    this.btnJoinCircleToolbar = btnJoinCircleToolbar;
    this.consCircleName = consCircleName;
    this.consCircleSelection = consCircleSelection;
    this.imgViewAddCircleMembers = imgViewAddCircleMembers;
    this.imgViewArrowUp = imgViewArrowUp;
    this.recyclerViewCircle = recyclerViewCircle;
    this.textViewBorderLine = textViewBorderLine;
    this.txtCircleName = txtCircleName;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutCircleSelectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutCircleSelectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_circle_selection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutCircleSelectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.background_opaque_view;
      View backgroundOpaqueView = ViewBindings.findChildViewById(rootView, id);
      if (backgroundOpaqueView == null) {
        break missingId;
      }

      id = R.id.btn_create_circle_toolbar;
      MaterialButton btnCreateCircleToolbar = ViewBindings.findChildViewById(rootView, id);
      if (btnCreateCircleToolbar == null) {
        break missingId;
      }

      id = R.id.btn_join_circle_toolbar;
      MaterialButton btnJoinCircleToolbar = ViewBindings.findChildViewById(rootView, id);
      if (btnJoinCircleToolbar == null) {
        break missingId;
      }

      id = R.id.cons_circle_name;
      ConstraintLayout consCircleName = ViewBindings.findChildViewById(rootView, id);
      if (consCircleName == null) {
        break missingId;
      }

      ConstraintLayout consCircleSelection = (ConstraintLayout) rootView;

      id = R.id.img_view_add_circle_members;
      ShapeableImageView imgViewAddCircleMembers = ViewBindings.findChildViewById(rootView, id);
      if (imgViewAddCircleMembers == null) {
        break missingId;
      }

      id = R.id.img_view_arrow_up;
      ImageView imgViewArrowUp = ViewBindings.findChildViewById(rootView, id);
      if (imgViewArrowUp == null) {
        break missingId;
      }

      id = R.id.recycler_view_circle;
      RecyclerView recyclerViewCircle = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewCircle == null) {
        break missingId;
      }

      id = R.id.text_view_border_line;
      TextView textViewBorderLine = ViewBindings.findChildViewById(rootView, id);
      if (textViewBorderLine == null) {
        break missingId;
      }

      id = R.id.txt_circle_name;
      TextView txtCircleName = ViewBindings.findChildViewById(rootView, id);
      if (txtCircleName == null) {
        break missingId;
      }

      return new LayoutCircleSelectionBinding((ConstraintLayout) rootView, backgroundOpaqueView,
          btnCreateCircleToolbar, btnJoinCircleToolbar, consCircleName, consCircleSelection,
          imgViewAddCircleMembers, imgViewArrowUp, recyclerViewCircle, textViewBorderLine,
          txtCircleName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
